import { RichTypeAny } from "../../flowGraphRichTypes.js";
import { FlowGraphWithOnDoneExecutionBlock } from "../../flowGraphWithOnDoneExecutionBlock.js";
import { RegisterClass } from "../../../Misc/typeStore.js";
import { FlowGraphPathComponent } from "../../flowGraphPathComponent.js";
/**
 * @experimental
 * Block that sets a property on a target object.
 */
export class FlowGraphSetPropertyBlock extends FlowGraphWithOnDoneExecutionBlock {
    constructor(config) {
        super(config);
        this.config = config;
        this.value = this.registerDataInput("value", RichTypeAny);
        this.templateComponent = new FlowGraphPathComponent(config.path, this);
    }
    _execute(context) {
        const value = this.value.getValue(context);
        this.templateComponent.setProperty(context, value);
        this.onDone._activateSignal(context);
    }
    serialize(serializationObject = {}) {
        super.serialize(serializationObject);
        serializationObject.config.path = this.config.path.serialize();
    }
    getClassName() {
        return "FGSetPropertyBlock";
    }
}
RegisterClass("FGSetPropertyBlock", FlowGraphSetPropertyBlock);
//# sourceMappingURL=flowGraphSetPropertyBlock.js.map